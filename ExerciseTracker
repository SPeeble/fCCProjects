const express = require('express')
const app = express()
const cors = require('cors')
const bodyParser = require('body-parser')
const mongoose = require('mongoose')
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true});
require('dotenv').config()

app.use(cors())
app.use(express.static('public'))
app.use(bodyParser.urlencoded({extended: false}))
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/views/index.html')
});

// User information Schema
const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true
  }
})

const User = mongoose.model('User', userSchema);

// Exercise information Schema
const exerciseSchema = new mongoose.Schema({
  userId: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  duration: {
    type: Number,
    required: true
  },
  date: {
    type: Date,
    default: new Date(Date.now())
  }
})

const Exercise = mongoose.model('Exercise', exerciseSchema);

//create user
app.post('/api/users', function(req, res) {
  let username = req.body.username;
  let user = new User({username: username});
  user.save(function(err, data) {
    if (err) return res.json({error: 'Could not save user, try a different username'});
    res.json({username: data.username, _id: data._id});
  })
});

//fetches all users on get
app.get('/api/users', function(req, res) {
  User.find({}, function(err, data) {
    if (err) return res.json({error: err});
    res.send(data);
  })
})

//create exercise entry
app.post('/api/users/:_id/exercises', function(req, res) {
  let id = req.params._id;
  let date
  if (req.body.date) {
    date = new Date(req.body.date);
  } else {
    date = new Date(Date.now());
  }
  User.findById(id, function(err, data) {
    if (err) return res.json({error: err});
    let entry = {
      userId: id,
      description: req.body.description,
      duration: req.body.duration,
      date: date
    }
    let exercise = new Exercise(entry);
    exercise.save(function(err2, data2) {
      if (err2) return res.json({error: err2});
      res.json({
        username: data.username,
        description: data2.description,
        duration: data2.duration,
        date: data2.date.toDateString(),
        _id: id
      })
    })
  })
})

//get full user exercise log
app.get('/api/users/:_id/logs', function(req, res) {
  if (req.query.from) {
    if (isNaN(new Date(req.query.from))) {return json({error: 'Invalid from date'})};
  };
  if (req.query.to) {
    if (isNaN(new Date(req.query.to))) {return json({error: 'Invalid to date'})};
  };
  Exercise.find({userId: req.params._id}, function(err, data) {
    if (err) return res.json({error: err});
    let log = data;
    if (req.query.from) {
      log = log.filter(function(entry) {
        return Date.parse(entry.date) >= Date.parse(new Date(req.query.from))
      })
    };
    if (req.query.to) {
      log = log.filter(function(entry) {
        return Date.parse(entry.date) <= Date.parse(new Date(req.query.to))
      })
    };
    log.sort(function(a,b) {
      return Date.parse(a.date) - Date.parse(b.date)
    });
    if (req.query.limit) {
      log = log.slice(0, req.query.limit)
    };
    log = log.map(function(entry) {
      return {
        description: entry.description,
        duration: entry.duration,
        date: entry.date.toDateString()
      };
    });
    User.findById(req.params._id, function(err2, data2) {
      if (err2) return res.json({error: err2});
      let logJson = {
        username: data2.username,
        count: log.length,
        _id: req.params._id,
        log: log
      };
      res.json(logJson);
    })
  })
})


const listener = app.listen(process.env.PORT || 3000, () => {
  console.log('Your app is listening on port ' + listener.address().port)
})
